global
    # HAProxy全局配置
    daemon
    maxconn 50000                         # 最大连接数
    log stdout local0 info               # 日志配置
    
    # 性能优化
    nbproc 1                              # 进程数
    nbthread 4                            # 线程数
    cpu-map auto:1/1-4 0-3               # CPU绑定
    
    # SSL配置
    ssl-default-bind-options ssl-min-ver TLSv1.2
    ssl-default-server-options ssl-min-ver TLSv1.2
    
    # 统计配置
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats timeout 30s

defaults
    mode tcp                              # TCP模式，适用于MQTT
    timeout connect 5000ms               # 连接超时
    timeout client 60000ms               # 客户端超时
    timeout server 60000ms               # 服务器超时
    timeout tunnel 3600000ms             # 隧道超时，用于长连接
    
    option tcplog                         # TCP日志
    option dontlognull                    # 不记录空连接
    option tcp-check                      # TCP健康检查
    
    retries 3                             # 重试次数
    
# HAProxy统计界面
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 30s
    stats hide-version
    stats realm HAProxy\ Statistics
    stats auth admin:admin123

# MQTT负载均衡 - 支持30万连接
frontend mqtt_frontend
    bind *:1883
    mode tcp
    option tcplog
    
    # 连接限制
    maxconn 30000                         # 前端最大连接数
    
    # 超时配置
    timeout client 60s
    
    # 默认后端
    default_backend mqtt_backend
    
    # 访问控制列表
    tcp-request inspect-delay 5s
    tcp-request content accept

backend mqtt_backend
    mode tcp
    balance roundrobin                    # 轮询负载均衡
    
    # 健康检查
    option tcp-check
    tcp-check connect
    tcp-check send-binary 101600044d5154540402003c000c  # MQTT CONNECT包
    tcp-check expect binary 20020000      # MQTT CONNACK包
    
    # 服务器配置
    server mqtt-1 mqtt-broker-1:1883 check inter 10s rise 2 fall 3 maxconn 10000
    server mqtt-2 mqtt-broker-2:1883 check inter 10s rise 2 fall 3 maxconn 10000
    server mqtt-3 mqtt-broker-3:1883 check inter 10s rise 2 fall 3 maxconn 10000
    
    # 会话保持（基于源IP）
    stick-table type ip size 200k expire 30m
    stick on src

# MQTT over WebSocket负载均衡
frontend mqtt_ws_frontend
    bind *:8083
    mode http
    option httplog
    
    # WebSocket升级处理
    acl is_websocket hdr(Connection) -i upgrade
    acl is_websocket hdr(Upgrade) -i websocket
    
    use_backend mqtt_ws_backend if is_websocket
    default_backend mqtt_ws_backend

backend mqtt_ws_backend
    mode http
    balance roundrobin
    
    # WebSocket配置
    timeout tunnel 3600s
    
    # 健康检查
    option httpchk GET /mqtt
    http-check expect status 404           # MQTT WebSocket端点通常返回404
    
    # 服务器配置
    server mqtt-ws-1 mqtt-broker-1:8083 check inter 10s
    server mqtt-ws-2 mqtt-broker-2:8083 check inter 10s
    server mqtt-ws-3 mqtt-broker-3:8083 check inter 10s
    
    # 会话保持
    cookie SERVERID insert indirect nocache
    server mqtt-ws-1 mqtt-broker-1:8083 check cookie s1
    server mqtt-ws-2 mqtt-broker-2:8083 check cookie s2
    server mqtt-ws-3 mqtt-broker-3:8083 check cookie s3

# CoAP UDP负载均衡（仅支持四层负载均衡）
frontend coap_frontend
    bind *:5683
    mode tcp
    option tcplog
    
    maxconn 10000
    timeout client 30s
    
    default_backend coap_backend

backend coap_backend
    mode tcp
    balance roundrobin
    
    # UDP健康检查（简单TCP检查）
    option tcp-check
    tcp-check connect port 5683
    
    # 服务器配置
    server coap-1 coap-server-1:5683 check inter 30s
    server coap-2 coap-server-2:5683 check inter 30s
    
    # 源IP会话保持
    stick-table type ip size 100k expire 10m
    stick on src

# TCP设备直连负载均衡
frontend tcp_device_frontend
    bind *:8090
    mode tcp
    option tcplog
    
    maxconn 20000
    timeout client 60s
    
    default_backend tcp_device_backend

backend tcp_device_backend
    mode tcp
    balance leastconn                     # 最少连接数算法
    
    # 健康检查
    option tcp-check
    tcp-check connect
    tcp-check send-binary 48454C4C4F      # "HELLO"
    tcp-check expect binary 4F4B          # "OK"
    
    # 服务器配置
    server tcp-1 tcp-server-1:8090 check inter 10s maxconn 5000
    server tcp-2 tcp-server-2:8090 check inter 10s maxconn 5000
    server tcp-3 tcp-server-3:8090 check inter 10s maxconn 5000
    server tcp-4 tcp-server-4:8090 check inter 10s maxconn 5000
    
    # 会话保持（重要：确保设备连接到同一后端）
    stick-table type string len 32 size 200k expire 24h
    stick on req.payload(0,32)            # 基于请求负载的前32字节

# HTTP API负载均衡
frontend http_api_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/iot-platform.pem
    mode http
    option httplog
    
    # 重定向HTTP到HTTPS
    redirect scheme https if !{ ssl_fc }
    
    maxconn 10000
    
    # API路由
    acl is_api path_beg /api/
    acl is_device_api path_beg /api/device/
    acl is_admin_api path_beg /api/admin/
    
    use_backend api_backend if is_api
    default_backend web_backend

backend api_backend
    mode http
    balance roundrobin
    
    # 健康检查
    option httpchk GET /api/health
    http-check expect status 200
    
    # 服务器配置
    server api-1 api-server-1:8080 check inter 10s cookie s1
    server api-2 api-server-2:8080 check inter 10s cookie s2
    server api-3 api-server-3:8080 check inter 10s cookie s3
    
    # 会话保持
    cookie JSESSIONID prefix nocache
    
    # 压缩
    compression algo gzip
    compression type text/html text/plain text/css application/json

backend web_backend
    mode http
    balance roundrobin
    
    # 健康检查
    option httpchk GET /
    http-check expect status 200
    
    # 服务器配置
    server web-1 web-server-1:80 check inter 30s
    server web-2 web-server-2:80 check inter 30s

# 监控和告警
listen health_check
    bind *:8405
    mode http
    stats enable
    stats uri /health
    stats refresh 5s
    
    # 自定义健康检查页面
    monitor-uri /ping
    monitor fail if { nbsrv(mqtt_backend) eq 0 }
    monitor fail if { nbsrv(api_backend) eq 0 } 