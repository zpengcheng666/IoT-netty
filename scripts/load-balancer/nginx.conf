# Nginx负载均衡配置 - IoT平台数十万设备支持

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# 性能优化
worker_rlimit_nofile 65535;

events {
    worker_connections 65535;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # 性能优化配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    
    # 缓冲区优化
    client_body_buffer_size 128k;
    client_max_body_size 50m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # 超时设置
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # 限流配置
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=device:50m rate=100r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # API后端服务器组
    upstream api_backend {
        least_conn;
        keepalive 300;
        keepalive_requests 1000;
        keepalive_timeout 60s;
        
        server api-server-1:8080 weight=1 max_fails=3 fail_timeout=30s;
        server api-server-2:8080 weight=1 max_fails=3 fail_timeout=30s;
        server api-server-3:8080 weight=1 max_fails=3 fail_timeout=30s;
        
        # 健康检查
        check interval=10000 rise=2 fall=3 timeout=5000 type=http;
        check_http_send "GET /api/health HTTP/1.0\r\n\r\n";
        check_http_expect_alive http_2xx http_3xx;
    }
    
    # 设备数据接入后端
    upstream device_backend {
        ip_hash;  # 设备会话保持
        keepalive 200;
        
        server device-server-1:8080 weight=2 max_fails=2 fail_timeout=10s;
        server device-server-2:8080 weight=2 max_fails=2 fail_timeout=10s;
        server device-server-3:8080 weight=2 max_fails=2 fail_timeout=10s;
        server device-server-4:8080 weight=1 max_fails=2 fail_timeout=10s backup;
    }
    
    # WebSocket MQTT后端
    upstream mqtt_ws_backend {
        ip_hash;  # WebSocket连接保持
        
        server mqtt-broker-1:8083 weight=1 max_fails=2 fail_timeout=10s;
        server mqtt-broker-2:8083 weight=1 max_fails=2 fail_timeout=10s;
        server mqtt-broker-3:8083 weight=1 max_fails=2 fail_timeout=10s;
    }
    
    # 管理后台后端
    upstream admin_backend {
        least_conn;
        keepalive 100;
        
        server admin-server-1:8080 weight=1 max_fails=3 fail_timeout=30s;
        server admin-server-2:8080 weight=1 max_fails=3 fail_timeout=30s;
    }
    
    # 缓存配置
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m max_size=1g 
                     inactive=60m use_temp_path=off;
    
    # 主配置服务器
    server {
        listen 80;
        listen 443 ssl http2;
        server_name iot-platform.example.com;
        
        # SSL配置
        ssl_certificate /etc/ssl/certs/iot-platform.crt;
        ssl_certificate_key /etc/ssl/private/iot-platform.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        
        # HTTP重定向到HTTPS
        if ($scheme != "https") {
            return 301 https://$host$request_uri;
        }
        
        # 安全头
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
        
        # API接口 - 高并发优化
        location /api/ {
            # 限流
            limit_req zone=api burst=20 nodelay;
            limit_conn conn_limit_per_ip 50;
            
            # 代理设置
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超时设置
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 缓冲区
            proxy_buffer_size 64k;
            proxy_buffers 32 32k;
            proxy_busy_buffers_size 128k;
            
            # 缓存配置（GET请求）
            proxy_cache api_cache;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_revalidate on;
            proxy_cache_lock on;
            
            # 跳过缓存条件
            proxy_cache_bypass $http_pragma $http_authorization;
            proxy_no_cache $http_pragma $http_authorization;
            
            # 缓存键
            proxy_cache_key $scheme$proxy_host$request_uri$is_args$args;
            add_header X-Cache-Status $upstream_cache_status;
        }
        
        # 设备数据接入 - 超高并发
        location /api/device/ {
            # 设备专用限流（更宽松）
            limit_req zone=device burst=200 nodelay;
            limit_conn conn_limit_per_ip 200;
            
            proxy_pass http://device_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Device-Type "http";
            
            # 快速响应优化
            proxy_connect_timeout 3s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # 禁用缓存
            proxy_cache off;
            
            # 大数据支持
            client_max_body_size 10m;
        }
        
        # MQTT WebSocket代理
        location /mqtt {
            proxy_pass http://mqtt_ws_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # WebSocket长连接
            proxy_connect_timeout 4s;
            proxy_send_timeout 3600s;
            proxy_read_timeout 3600s;
            
            # 禁用缓冲
            proxy_buffering off;
            
            # 心跳
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # 管理后台
        location /admin/ {
            proxy_pass http://admin_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # 管理后台缓存
            proxy_cache api_cache;
            proxy_cache_valid 200 5m;
        }
        
        # 静态资源
        location /static/ {
            root /var/www/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # 压缩
            gzip_static on;
            
            # 安全
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }
        
        # 健康检查
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Nginx状态
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
        
        # 监控指标
        location /metrics {
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
            
            content_by_lua_block {
                local prometheus = require "resty.prometheus"
                prometheus:collect()
            }
        }
    }
    
    # UDP负载均衡（Stream模块）
    include /etc/nginx/stream.conf;
}

# Stream配置文件（/etc/nginx/stream.conf）
stream {
    # CoAP UDP负载均衡
    upstream coap_backend {
        least_conn;
        server coap-server-1:5683 weight=1 max_fails=2 fail_timeout=10s;
        server coap-server-2:5683 weight=1 max_fails=2 fail_timeout=10s;
    }
    
    server {
        listen 5683 udp;
        proxy_pass coap_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_bind $remote_addr transparent;
    }
} 