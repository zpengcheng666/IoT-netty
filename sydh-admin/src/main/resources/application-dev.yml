# 数据源配置
spring:
  datasource:
    dynamic:
      druid:
        initial-size: 5
        min-idle: 10
        max-wait: 60000
        max-active: 20
        timeBetweenEvictionRunsMillis: 60000  # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        minEvictableIdleTimeMillis: 300000    # 配置一个连接在池中最小生存的时间，单位是毫秒
        maxEvictableIdleTimeMillis: 900000    # 配置一个连接在池中最大生存的时间，单位是毫秒
        validation-query: 'SELECT 1'
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
      datasource:
        master:
          type: com.alibaba.druid.pool.DruidDataSource
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://192.168.89.201:3306/fastbee?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
          username: root
          password: admin123
          druid:
            filters: stat,wall
            stat:
              # 慢SQL记录
              log-slow-sql: true
              slow-sql-millis: 1000
              merge-sql: true
            wall:
              none-base-statement-allow: true
        taos: # 配置 taos 数据源
          enabled: false
          type: com.alibaba.druid.pool.DruidDataSource
          driver-class-name: com.taosdata.jdbc.rs.RestfulDriver
          url: jdbc:TAOS-RS://fastbee:6041/fastbee_log?timezone=UTC-8&charset=utf-8
          username: root
          password: taosdata
          dbName: fastbee_log
#        slave:
#          type: com.alibaba.druid.pool.DruidDataSource
#          driver-class-name: com.mysql.cj.jdbc.Driver
#          url: jdbc:mysql://localhost:3306/fastbee1?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
#          username: root
#          password: sydh
  shardingsphere:
    enabled: false


  # redis 配置
  redis:
    host: 192.168.89.201                        # 地址
    port: 6379                              # 端口，默认为6379
    database: 0                             # 数据库索引
    password: admin123                       # 密码
    timeout: 10s                            # 连接超时时间
    lettuce:
      pool:
        min-idle: 0                         # 连接池中的最小空闲连接
        max-idle: 8                         # 连接池中的最大空闲连接
        max-active: 8                       # 连接池的最大数据库连接数
        max-wait: -1ms                      # 连接池最大阻塞等待时间（使用负值表示没有限制）
  # mqtt 配置
  mqtt:
    username: admin                       # 账号
    password: admin123                       # 密码
    host-url: tcp://192.168.89.201:1883          # mqtt连接tcp地址
    client-id: ${random.int}                # 客户端Id，不能相同，采用随机数 ${random.value}
    default-topic: test                     # 默认主题
    timeout: 30                             # 超时时间
    keepalive: 30                           # 保持连接
    clearSession: true                      # 清除会话(设置为false,断开连接，重连后使用原来的会话 保留订阅的主题，能接收离线期间的消息)
  
  # kafka 配置
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
    producer:
      # 生产者配置
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      batch-size: 16384                    # 批次大小16KB
      buffer-memory: 33554432              # 缓冲区内存32MB
      retries: 3                           # 重试次数
      acks: 1                              # 应答级别 (0/1/all)
      compression-type: gzip               # 压缩类型
      linger-ms: 5                         # 延迟发送时间
      # 增加生产者超时时间
      request-timeout-ms: 30000
      delivery-timeout-ms: 120000
    consumer:
      # 消费者配置
      group-id: ${spring.application.name:iot-device-consumer}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: latest           # 偏移量重置策略
      enable-auto-commit: false           # 禁用自动提交
      max-poll-records: 100              # 单次拉取最大记录数
      fetch-min-size: 1024               # 最小拉取大小1KB
      fetch-max-wait: 500                # 最大等待时间500ms
      # 增加消费者超时时间
      request-timeout-ms: 30000
      session-timeout-ms: 30000
      heartbeat-interval-ms: 10000
    listener:
      # 监听器配置
      ack-mode: manual-immediate         # 手动提交模式
      concurrency: 3                     # 并发数
      poll-timeout: 3000                 # 轮询超时时间
    admin:
      # 管理员配置（用于创建Topic）
      client-id: iot-admin
      request-timeout-ms: 5000   # 缩短检查时间
      connections-max-idle-ms: 300000
      retry-backoff-ms: 1000
      fail-fast: true            # 快速失败，不阻塞启动
    # 禁用自动Topic创建，避免连接错误
    template:
      default-topic: iot-device-data

# sip 配置
sip:
  enabled: false                         # 是否启用视频监控SIP，true为启用
  ## 本地调试时，绑定网卡局域网IP，设备在同一局域网，设备接入IP填写绑定IP
  ## 部署服务端时，默认绑定容器IP，设备接入IP填写服务器公网IP
  ip: 192.168.89.103
  port: 5061                                # SIP端口(保持默认)
  domain: 3402000000                        # 由省级、市级、区级、基层编号组成
  id: 34020000002000000001                  # 同上，另外增加编号，(可保持默认)
  password: 12345678                        # 监控设备接入的密码
  log: true
  zlmRecordPath: /opt/media/bin/www
  mp4_max_second: 30                        # 视频录像时长，单位秒

# 日志配置
logging:
  level:
    com.sydh: info
    com.yomahub: info
    org.dromara: warn
    org.springframework: warn
    com.baomidou: info
#    com.sydh.mq.config: INFO    # Kafka配置日志
#    com.sydh.iot.data.config: INFO # 消费者配置日志
#    org.springframework.kafka: WARN # 降低Spring Kafka日志级别

# Swagger配置
swagger:
  enabled: true                      # 是否开启swagger
  pathMapping:                      # 请求前缀

# Knife4j增强配置
knife4j:
  enable: true                              # 开启Knife4j增强模式
  setting:
    language: zh-CN                         # 设置默认语言为中文

# license配置已移除 - 开源版本不需要license验证
# license:
#   publicAlias: FastbeePublicKey
#   storePass: fastbee_store_password666
#   licensePath: classpath:license.lic
#   publicKeysStorePath: classpath:publicCerts.keystore

emqx:
  api:
    base-url: http://192.168.89.201:18083/api/v5
    key: c57a07b893fac294
    secret: g5hpLtF2F2WC2bQB6cwgHgFGnZjHh5mQTOMaai0y9A0P

# 连接池配置
rest-template:
  max-connections: 30
  max-per-route: 10
  connection-timeout: 5000
  read-timeout: 3000

# IoT平台Kafka Topic配置
iot:
  message:
#    mode: kafka  # 开发环境默认使用queue模式，避免Kafka依赖
    mode: queue  # 开发环境默认使用queue模式，避免Kafka依赖
  kafka:
    enabled: true   # 启用Kafka相关组件（用于检查连接状态）
    topics:
      device-data: "iot-device-data"
      device-status: "iot-device-status"
      device-commands: "iot-device-commands"
      device-events: "iot-device-events"
      device-ota: "iot-device-ota"
    partitions: 6
    replication-factor: 1


# 开发环境Netty性能配置
server:
  device:
    scale: small             # 开发环境使用小规模配置,设备规模: small(0-1万), medium(1万-10万), large(10万+)
    expected-count: 10000    # 开发环境预期1000台设备
  adaptive:
    enabled: true            # 启用自适应
    monitor-interval: 600    # 开发环境10分钟检查一次
    auto-scale: true
  # Netty线程配置 - 开发环境优化
  netty:
    mqtt:
      worker-threads: 8      # MQTT Worker线程数（开发环境）
      business-threads: 4    # MQTT 业务线程数
      max-connections: 10000 # MQTT最大连接数
      queue-size: 2000       # 队列大小
    tcp:
      worker-threads: 6      # TCP Worker线程数
      business-threads: 3    # TCP 业务线程数  
      max-connections: 5000  # TCP最大连接数
      queue-size: 1500       # 队列大小
    http:
      worker-threads: 4      # HTTP Worker线程数
      business-threads: 2    # HTTP 业务线程数
      max-connections: 2000  # HTTP最大连接数
      queue-size: 1000       # 队列大小

# 监控配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus # 暴露监控端点
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true                       # 启用Prometheus指标导出



