package ${packageName}.service;

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import java.util.List;
import ${packageName}.domain.${ClassName};
import ${packageName}.domain.vo.${ClassName}VO;
import com.baomidou.mybatisplus.extension.service.IService;
/**
 * ${functionName}Service接口
 *
 * @author ${author}
 * @date ${datetime}
 */
public interface I${ClassName}Service extends IService<${ClassName}>
{
    /** 代码生成区域 可直接覆盖**/

    /**
     * 查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @return ${functionName}分页集合
     */
    Page<${ClassName}VO> page${ClassName}VO(${ClassName} ${className});

    /**
     * 查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @return ${functionName}集合
     */
    List<${ClassName}VO> list${ClassName}VO(${ClassName} ${className});

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} 主键
     * @return ${functionName}
     */
     ${ClassName} select${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} 主键
     * @return ${functionName}
     */
    ${ClassName} queryByIdWithCache(${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * 新增${functionName}
     *
     * @param ${className} ${functionName}
     * @return 是否新增成功
     */
    Boolean insertWithCache(${ClassName} ${className});

    /**
     * 修改${functionName}
     *
     * @param ${className} ${functionName}
     * @return 是否修改成功
     */
    Boolean updateWithCache(${ClassName} ${className});

    /**
     * 校验并批量删除${functionName}信息
     *
     * @param ids     待删除的主键集合
     * @param isValid 是否进行有效性校验
     * @return 是否删除成功
     */
    Boolean deleteWithCacheByIds(${pkColumn.javaType}[] ids, Boolean isValid);
    /** 代码生成区域 可直接覆盖END**/

    /** 自定义代码区域 **/


    /** 自定义代码区域 END**/

}
